{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/app-version.js","dummy/controllers/array.js","dummy/controllers/object.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/sl/register-test-helpers.js","dummy/tests/helpers/sl/synchronous/ajax.js","dummy/tests/helpers/sl/synchronous/contains.js","dummy/tests/helpers/sl/synchronous/requires.js","dummy/tests/helpers/sl/synchronous.js","dummy/tests/helpers/sl/utils/utils.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/helpers/sl/synchronous/ajax-test.js","dummy/tests/unit/helpers/sl/synchronous/ajax-test.jshint.js","dummy/tests/unit/helpers/sl/synchronous/contains-test.js","dummy/tests/unit/helpers/sl/synchronous/contains-test.jshint.js","dummy/tests/unit/helpers/sl/synchronous/requires-test.js","dummy/tests/unit/helpers/sl/synchronous/requires-test.jshint.js","dummy/tests/unit/helpers/sl/utils/utils-test.js","dummy/tests/unit/helpers/sl/utils/utils-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n    'use strict';\n\n    var App = undefined;\n\n    Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n    App = Ember['default'].Application.extend({\n        modulePrefix: config['default'].modulePrefix,\n        podModulePrefix: config['default'].podModulePrefix,\n        Resolver: Resolver['default']\n    });\n\n    loadInitializers['default'](App, config['default'].modulePrefix);\n\n    exports['default'] = App;\n\n});","define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, AppVersionComponent, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = AppVersionComponent['default'].extend({\n    version: version,\n    name: name\n  });\n\n});","define('dummy/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, initializerFactory, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: initializerFactory['default'](name, version)\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n    'use strict';\n\n    var Router = Ember['default'].Router.extend({\n        location: config['default'].locationType\n    });\n\n    Router.map(function () {});\n\n    exports['default'] = Router;\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.7\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 12,\n              \"column\": 20\n            },\n            \"end\": {\n              \"line\": 12,\n              \"column\": 71\n            }\n          },\n          \"moduleName\": \"dummy/templates/application.hbs\"\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"fa fa-home\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" Home\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes() { return []; },\n        statements: [\n\n        ],\n        locals: [],\n        templates: []\n      };\n    }());\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 32,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"dummy/templates/application.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"br\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"btn-group pull-right\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-default dropdown-toggle\");\n        dom.setAttribute(el5,\"data-toggle\",\"dropdown\");\n        dom.setAttribute(el5,\"aria-expanded\",\"false\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"i\");\n        dom.setAttribute(el6,\"class\",\"fa fa-reorder\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\" \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"caret\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"ul\");\n        dom.setAttribute(el5,\"class\",\"dropdown-menu\");\n        dom.setAttribute(el5,\"role\",\"menu\");\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createComment(\"\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"http://softlayer.github.io/sl-ember-test-helpers/docs\");\n        dom.setAttribute(el7,\"target\",\"new\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-book\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Documentation\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/CONTRIBUTING.md\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-cog\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Contribution Guide\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/stargazers\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-star\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Star Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"li\");\n        var el7 = dom.createElement(\"a\");\n        dom.setAttribute(el7,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/fork\");\n        var el8 = dom.createElement(\"i\");\n        dom.setAttribute(el8,\"class\",\"fa fa-code-fork\");\n        dom.appendChild(el7, el8);\n        var el8 = dom.createTextNode(\" Fork Our Repo\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-md-12 text-center\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createTextNode(\"ember install sl-ember-test-helpers\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"p\");\n        var el5 = dom.createElement(\"a\");\n        dom.setAttribute(el5,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers/blob/master/LICENSE.md\");\n        var el6 = dom.createTextNode(\"MIT Licensed\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [2]);\n        var morphs = new Array(2);\n        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1, 1, 3, 1]),0,0);\n        morphs[1] = dom.createMorphAt(element0,3,3);\n        return morphs;\n      },\n      statements: [\n        [\"block\",\"link-to\",[\"index\"],[],0,null,[\"loc\",[null,[12,20],[12,83]]]],\n        [\"content\",\"outlet\",[\"loc\",[null,[22,4],[22,14]]]]\n      ],\n      locals: [],\n      templates: [child0]\n    };\n  }()));\n\n});","define('dummy/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 18,\n            \"column\": 6\n          }\n        },\n        \"moduleName\": \"dummy/templates/index.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-12 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"sl-ember-test-helpers REPLACE_APPLICATION_VERSION\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"lead\");\n        var el4 = dom.createTextNode(\"An Ember CLI Addon that provides and registers test helpers for use in the testing of your application.\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-6 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"http://softlayer.github.io/sl-ember-test-helpers/docs\");\n        dom.setAttribute(el4,\"target\",\"new\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-book fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"http://softlayer.github.io/sl-ember-test-helpers/docs\");\n        dom.setAttribute(el4,\"target\",\"new\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Documentation\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-md-6 text-center\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers\");\n        var el5 = dom.createElement(\"i\");\n        dom.setAttribute(el5,\"class\",\"fa fa-github fa-5x\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"href\",\"https://github.com/softlayer/sl-ember-test-helpers\");\n        var el5 = dom.createElement(\"b\");\n        var el6 = dom.createTextNode(\"Available on GitHub\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes() { return []; },\n      statements: [\n\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n    'use strict';\n\n    var resolver = Resolver['default'].create();\n\n    resolver.namespace = {\n        modulePrefix: config['default'].modulePrefix,\n        podModulePrefix: config['default'].podModulePrefix\n    };\n\n    exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/sl/register-test-helpers', ['exports', 'ember', 'dummy/tests/helpers/sl/synchronous'], function (exports, Ember, synchronous) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        Ember['default'].Test.registerHelper('contains', synchronous.contains);\n        Ember['default'].Test.registerHelper('Ajax', synchronous.AjaxHelper);\n        Ember['default'].Test.registerHelper('requires', synchronous.requires);\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous/ajax', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n    var AjaxHelper = (function () {\n        function AjaxHelper() {\n            _classCallCheck(this, AjaxHelper);\n        }\n\n        _createClass(AjaxHelper, null, [{\n            key: 'begin',\n\n            /**\n             * Emulate the beginning of an AJAX request\n             *\n             * @function\n             * @static\n             * @param {String} [endpoint]\n             * @returns {undefined}\n             */\n            value: function begin(endpoint) {\n                Ember['default'].run(function () {\n                    if (endpoint) {\n                        Ember['default'].$(document).trigger('ajaxSend', [null, { url: endpoint }]);\n                    } else {\n                        Ember['default'].$(document).trigger('ajaxStart');\n                    }\n                });\n            }\n\n            /**\n             * Emulate the conclusion of an AJAX request\n             *\n             * @function\n             * @static\n             * @param {String} [endpoint]\n             * @returns {undefined}\n             */\n        }, {\n            key: 'end',\n            value: function end(endpoint) {\n                Ember['default'].run(function () {\n                    if (endpoint) {\n                        Ember['default'].$(document).trigger('ajaxComplete', [null, { url: endpoint }]);\n                    } else {\n                        Ember['default'].$(document).trigger('ajaxStop');\n                    }\n                });\n            }\n        }]);\n\n        return AjaxHelper;\n    })();\n\n    exports['default'] = AjaxHelper;\n\n});","define('dummy/tests/helpers/sl/synchronous/contains', ['exports', 'ember', 'dummy/tests/helpers/sl/utils/utils'], function (exports, Ember, utils) {\n\n    'use strict';\n\n    exports['default'] = function () {\n        var index = 3 === arguments.length ? 1 : 0;\n        var underTest = arguments[index];\n        var testFor = arguments[index + 1];\n\n        /* jshint ignore:start */\n        Ember['default'].assert('First non-optional argument must be an array, string or object', ('object' === Ember['default'].typeOf(underTest) || 'string' === Ember['default'].typeOf(underTest) || 'array' === Ember['default'].typeOf(underTest)) && 'symbol' !== typeof underTest);\n\n        Ember['default'].assert('Second non-optional argument must be an array, string or object', ('object' === Ember['default'].typeOf(testFor) || 'string' === Ember['default'].typeOf(testFor) || 'array' === Ember['default'].typeOf(testFor)) && 'symbol' !== typeof testFor);\n        /* jshint ignore:end */\n\n        return utils.doArraysIntersect(utils.convertToArray(underTest), utils.convertToArray(testFor));\n    }\n\n});","define('dummy/tests/helpers/sl/synchronous/requires', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var requiresHelper = function requiresHelper(methodUnderTest, requiredTypes) {\n        var typesToTest = {\n            'number': {\n                required: false,\n                testValue: 123987465,\n                message: 'Parameter was a number'\n            },\n            'string': {\n                required: false,\n                testValue: 'testString',\n                message: 'Parameter was a string'\n            },\n            'array': {\n                required: false,\n                testValue: [],\n                message: 'Parameter was an array'\n            },\n            'object': {\n                required: false,\n                testValue: {},\n                message: 'Parameter was an object'\n            },\n            'function': {\n                required: false,\n                testValue: function testValue() {},\n                message: 'Parameter was a function'\n            },\n            'undefined': {\n                required: false,\n                testValue: undefined,\n                message: 'Parameter was undefined'\n            },\n            'boolean': {\n                required: false,\n                testValue: true,\n                message: 'Parameter was a boolean'\n            },\n            'null': {\n                required: false,\n                testValue: null,\n                message: 'Parameter was null'\n            }\n        };\n\n        Ember['default'].assert('First argument must be a function', 'function' === Ember['default'].typeOf(methodUnderTest));\n        Ember['default'].assert('Second argument must be an array', 'array' === Ember['default'].typeOf(requiredTypes));\n\n        // Set required parameter types\n        requiredTypes.forEach(function (item) {\n            typesToTest[item]['required'] = true;\n        });\n\n        var testsThatHaveFailed = [];\n        var property = undefined;\n\n        // Test each parameter type\n        for (property in typesToTest) {\n            if (typesToTest.hasOwnProperty(property)) {\n                // Reset flag\n                var assertionThrown = undefined;\n                assertionThrown = false;\n\n                // Assign cleaner object reference\n                var parameter = typesToTest[property];\n\n                // Test parameter\n                try {\n                    methodUnderTest(parameter['testValue']);\n                } catch (error) {\n                    assertionThrown = true;\n                }\n\n                var assertionPassed = undefined;\n                assertionPassed = parameter['required'] ? !assertionThrown : assertionThrown;\n\n                if (!assertionPassed) {\n                    testsThatHaveFailed.push(parameter['message']);\n                }\n            }\n        }\n\n        return {\n            requires: 0 === testsThatHaveFailed.length,\n            messages: testsThatHaveFailed.join('; ')\n        };\n    };\n\n    exports['default'] = requiresHelper;\n\n});","define('dummy/tests/helpers/sl/synchronous', ['exports', 'dummy/tests/helpers/sl/synchronous/ajax', 'dummy/tests/helpers/sl/synchronous/contains', 'dummy/tests/helpers/sl/synchronous/requires'], function (exports, AjaxHelper, contains, requires) {\n\n\t'use strict';\n\n\n\n\texports.AjaxHelper = AjaxHelper['default'];\n\texports.contains = contains['default'];\n\texports.requires = requires['default'];\n\n});","define('dummy/tests/helpers/sl/utils/utils', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var convertToArray = function convertToArray(underTest) {\n\n        /* jshint ignore:start */\n        Ember['default'].assert('Array, String, or Object must be supplied', ('array' === Ember['default'].typeOf(underTest) || 'string' === Ember['default'].typeOf(underTest) || 'object' === Ember['default'].typeOf(underTest)) && 'symbol' !== typeof underTest);\n        /* jshint ignore:end */\n\n        var returnArray = underTest;\n\n        switch (Ember['default'].typeOf(underTest)) {\n            case 'array':\n                returnArray = underTest;\n                break;\n\n            case 'string':\n                returnArray = convertStringToArray(underTest);\n                break;\n\n            case 'object':\n                returnArray = convertObjectKeysToArray(underTest);\n                break;\n        }\n\n        return returnArray;\n    };\n\n    /**\n     * Splits a string into an array of individual \"words\" as delineated by spaces\n     *\n     * Primarily exists to convert format of call to .prop( 'class' )\n     *\n     * @function\n     * @param {String} underTest\n     * @throws {ember.assert} If argument is not provided or is not a string\n     * @returns {Array}\n     */\n    var convertStringToArray = function convertStringToArray(underTest) {\n\n        Ember['default'].assert('String must be supplied', 'string' === Ember['default'].typeOf(underTest));\n\n        return underTest.split(' ');\n    };\n\n    /**\n     * Returns an array containing all of the property names of an object\n     *\n     * Property names are only extracted from the object provided.  No recursion into nested objects occurs.\n     *\n     * @function\n     * @param {Object} underTest\n     * @throws {ember.assert} If argument is not provided or is not an object\n     * @returns {Array}\n     */\n    var convertObjectKeysToArray = function convertObjectKeysToArray(underTest) {\n\n        /* jshint ignore:start */\n        Ember['default'].assert('Object must be supplied', 'object' === Ember['default'].typeOf(underTest) && 'array' !== Ember['default'].typeOf(underTest) && 'symbol' !== typeof underTest);\n        /* jshint ignore:end */\n\n        return Object.keys(underTest);\n    };\n\n    /**\n     * Whether at least one element of the array exists in the other\n     *\n     * @function\n     * @param {Array} underTest\n     * @param {Array} testFor\n     * @returns {Boolean}\n     */\n    var doArraysIntersect = function doArraysIntersect(underTest, testFor) {\n\n        Ember['default'].assert('Parameters must be Arrays', 'array' === Ember['default'].typeOf(underTest) && 'array' === Ember['default'].typeOf(testFor));\n\n        return testFor.some(function (v) {\n            return underTest.indexOf(v) >= 0;\n        });\n    };\n\n    exports.convertToArray = convertToArray;\n    exports.convertStringToArray = convertStringToArray;\n    exports.convertObjectKeysToArray = convertObjectKeysToArray;\n    exports.doArraysIntersect = doArraysIntersect;\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, Ember, Application, config) {\n\n    'use strict';\n\n\n\n    exports['default'] = startApp;\n    function startApp(attrs) {\n        var application = undefined;\n\n        var attributes = Ember['default'].merge({}, config['default'].APP);\n        attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n        Ember['default'].run(function () {\n            application = Application['default'].create(attributes);\n            application.setupForTesting();\n            application.injectTestHelpers();\n        });\n\n        return application;\n    }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/ajax-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/ajax', 'sinon'], function (Ember, ember_qunit, AjaxHelper, sinon) {\n\n    'use strict';\n\n    module('Unit | Helper | sl/synchronous/ajax');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(AjaxHelper['default'], 'it exists');\n    });\n\n    ember_qunit.test('begin() with no parameter triggers \"ajaxStart\" event on document', function (assert) {\n        var spy = sinon['default'].spy(Ember['default'].$.prototype, 'trigger');\n\n        AjaxHelper['default'].begin();\n\n        assert.strictEqual(spy.args[0][0], 'ajaxStart');\n\n        Ember['default'].$.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('begin() with parameter triggers \"ajaxSend\" event on document', function (assert) {\n        var spy = sinon['default'].spy(Ember['default'].$.prototype, 'trigger');\n\n        AjaxHelper['default'].begin('testEndpoint');\n\n        assert.strictEqual(spy.args[0][0], 'ajaxSend');\n        assert.strictEqual(spy.args[0][1][1].url, 'testEndpoint');\n\n        Ember['default'].$.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('end() with no parameter triggers \"ajaxStop\" event on document', function (assert) {\n        var spy = sinon['default'].spy(Ember['default'].$.prototype, 'trigger');\n\n        AjaxHelper['default'].end();\n\n        assert.strictEqual(spy.args[0][0], 'ajaxStop');\n\n        Ember['default'].$.prototype.trigger.restore();\n    });\n\n    ember_qunit.test('end() with parameter triggers \"ajaxComplete\" event on document', function (assert) {\n        var spy = sinon['default'].spy(Ember['default'].$.prototype, 'trigger');\n\n        AjaxHelper['default'].end('testEndpoint');\n\n        assert.strictEqual(spy.args[0][0], 'ajaxComplete');\n        assert.strictEqual(spy.args[0][1][1].url, 'testEndpoint');\n\n        Ember['default'].$.prototype.trigger.restore();\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/ajax-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/sl/synchronous');\n  QUnit.test('unit/helpers/sl/synchronous/ajax-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sl/synchronous/ajax-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/contains-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/contains'], function (Ember, ember_qunit, contains) {\n\n    'use strict';\n\n    var utils = require('dummy/tests/helpers/sl/utils/utils');\n\n    module('Unit | Helper | sl/synchronous/contains');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(contains['default'], 'it exists');\n    });\n\n    ember_qunit.test('First non-optional argument must be an array, string or object', function (assert) {\n        var testPropertyOne = Ember['default'].Object.create({\n            parameter: 'null'\n        });\n\n        var testPropertyTwo = Ember['default'].Object.create({\n            parameter: 'null'\n        });\n\n        var callContains = function callContains() {\n            return contains['default'](testPropertyOne.parameter, testPropertyTwo.parameter);\n        };\n\n        // Number\n        testPropertyOne.set('parameter', 2);\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callContains, 'First parameter was a number');\n\n        // function\n        testPropertyOne.set('parameter', function () {});\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callContains, 'First parameter was a function');\n\n        // boolean\n        testPropertyOne.set('parameter', false);\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callContains, 'First parameter was false');\n\n        // undefined\n        testPropertyOne.set('parameter', undefined);\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callContains, 'First parameter was undefined');\n\n        // Array\n        testPropertyOne.set('parameter', ['2']);\n        testPropertyTwo.set('parameter', ['2']);\n\n        assert.ok(callContains(), 'First parameter was an array');\n\n        // Object\n        testPropertyOne.set('parameter', { test: 'test' });\n        testPropertyTwo.set('parameter', { test: 'test' });\n\n        assert.ok(callContains(), 'First parameter was an object');\n\n        // String\n        testPropertyOne.set('parameter', 'testString');\n        testPropertyTwo.set('parameter', 'testString');\n\n        assert.ok(callContains(), 'First parameter was a string');\n    });\n\n    ember_qunit.test('Second non-optional argument must be an array, string or object', function (assert) {\n        var testPropertyOne = Ember['default'].Object.create({\n            parameter: 'null'\n        });\n\n        var testPropertyTwo = Ember['default'].Object.create({\n            parameter: 'null'\n        });\n\n        var callContains = function callContains() {\n            return contains['default'](testPropertyOne.parameter, testPropertyTwo.parameter);\n        };\n\n        // Number\n        testPropertyOne.set('parameter', []);\n        testPropertyTwo.set('parameter', 2);\n\n        assert.throws(callContains, 'Second parameter was a number');\n\n        // function\n        testPropertyOne.set('parameter', []);\n        testPropertyTwo.set('parameter', function () {});\n\n        assert.throws(callContains, 'second parameter was a function');\n\n        // boolean\n        testPropertyOne.set('parameter', []);\n        testPropertyTwo.set('parameter', false);\n\n        assert.throws(callContains, 'second parameter was false');\n\n        // undefined\n        testPropertyOne.set('parameter', []);\n        testPropertyTwo.set('parameter', undefined);\n\n        assert.throws(callContains, 'second parameter was undefined');\n\n        // Array\n        testPropertyOne.set('parameter', ['2']);\n        testPropertyTwo.set('parameter', ['2']);\n\n        assert.ok(callContains(), 'First parameter was an array');\n\n        // Object\n        testPropertyOne.set('parameter', { test: 'test' });\n        testPropertyTwo.set('parameter', { test: 'test' });\n\n        assert.ok(callContains(), 'First parameter was an object');\n\n        // String\n        testPropertyOne.set('parameter', 'testString');\n        testPropertyTwo.set('parameter', 'testString');\n\n        assert.ok(callContains(), 'First parameter was a string');\n    });\n\n    ember_qunit.test('Returns value from call to doArraysIntersect()', function (assert) {\n        var spy = window.sinon.spy(utils, 'doArraysIntersect');\n\n        contains['default']([], []);\n\n        assert.ok(spy.calledOnce, 'doArraysIntersect() was called');\n\n        utils.doArraysIntersect.restore();\n    });\n\n    ember_qunit.test('Arguments are passed to doArraysIntersect() in the correct order', function (assert) {\n        var spy = window.sinon.spy(utils, 'doArraysIntersect');\n\n        contains['default']('b', ['d', 'e']);\n\n        assert.strictEqual(spy.args[0][0][0], 'b', 'First argument');\n\n        assert.deepEqual(spy.args[0][1], ['d', 'e'], 'Second argument');\n\n        utils.doArraysIntersect.restore();\n    });\n\n    ember_qunit.test('Returns a boolean', function (assert) {\n        var response = undefined;\n\n        response = contains['default']('b', ['d', 'e']);\n\n        assert.propEqual(response, false, 'Is boolean false');\n\n        response = contains['default'](['d', 'e'], 'e');\n\n        assert.propEqual(response, true, 'Is boolean true');\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/contains-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/sl/synchronous');\n  QUnit.test('unit/helpers/sl/synchronous/contains-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sl/synchronous/contains-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/requires-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/requires'], function (Ember, ember_qunit, requires) {\n\n    'use strict';\n\n    module('Unit | Helpers | sl/synchronous/requires');\n\n    ember_qunit.test('it exists', function (assert) {\n        assert.ok(requires['default'], 'it exists');\n    });\n\n    ember_qunit.test('First argument must be a function', function (assert) {\n        var testPropertyOne = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var testPropertyTwo = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var callRequires = function callRequires() {\n            return requires['default'](testPropertyOne.parameter, testPropertyTwo.parameter);\n        };\n\n        // Number\n        testPropertyOne.set('parameter', 123);\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callRequires, 'First parameter was a number');\n\n        // String\n        testPropertyOne.set('parameter', 'testString');\n\n        assert.throws(callRequires, 'First parameter was a string');\n\n        // Array\n        testPropertyOne.set('parameter', []);\n\n        assert.throws(callRequires, 'First parameter was an array');\n\n        // Object\n        testPropertyOne.set('parameter', {});\n\n        assert.throws(callRequires, 'First parameter was an object');\n\n        // Undefined\n        testPropertyOne.set('parameter', undefined);\n\n        assert.throws(callRequires, 'First parameter was undefined');\n\n        // Boolean\n        testPropertyOne.set('parameter', false);\n\n        assert.throws(callRequires, 'First parameter was a boolean');\n\n        // Function\n        testPropertyOne.set('parameter', function () {});\n\n        assert.ok(callRequires(), 'First parameter was a function');\n    });\n\n    ember_qunit.test('Second argument must be an array', function (assert) {\n        var testPropertyOne = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var testPropertyTwo = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var callRequires = function callRequires() {\n            return requires['default'](testPropertyOne.parameter, testPropertyTwo.parameter);\n        };\n\n        // Number\n        testPropertyOne.set('parameter', function () {});\n        testPropertyTwo.set('parameter', 123);\n\n        assert.throws(callRequires, 'Second parameter was a number');\n\n        // String\n        testPropertyTwo.set('parameter', 'testString');\n\n        assert.throws(callRequires, 'Second parameter was a string');\n\n        // Object\n        testPropertyTwo.set('parameter', {});\n\n        assert.throws(callRequires, 'Second parameter was an object');\n\n        // Function\n        testPropertyTwo.set('parameter', function () {});\n\n        assert.throws(callRequires, 'Second parameter was a function');\n\n        // Undefined\n        testPropertyTwo.set('parameter', undefined);\n\n        assert.throws(callRequires, 'Second parameter was undefined');\n\n        // Boolean\n        testPropertyTwo.set('parameter', false);\n\n        assert.throws(callRequires, 'Second parameter was a boolean');\n\n        // Array\n        testPropertyTwo.set('parameter', []);\n\n        assert.ok(callRequires(), 'Second parameter was an array');\n    });\n\n    ember_qunit.test('Return type', function (assert) {\n        var testFunction = function testFunction(first) {\n            Ember['default'].assert('Test argument must be a function or boolean', 'function' === Ember['default'].typeOf(first) || 'boolean' === Ember['default'].typeOf(first));\n        };\n\n        var returnTypeTest = requires['default'](testFunction, ['function', 'boolean']);\n\n        assert.deepEqual(returnTypeTest, { requires: true, messages: '' }, 'Returns expected object');\n    });\n\n    ember_qunit.test('Functions as expected', function (assert) {\n        var testFunction = function testFunction(first) {\n            Ember['default'].assert('Test argument must be a function or boolean', 'function' === Ember['default'].typeOf(first) || 'boolean' === Ember['default'].typeOf(first));\n        };\n\n        var functionTest = requires['default'](testFunction, ['function', 'boolean']);\n\n        assert.ok(functionTest.requires, 'Functioned as expected when passed desired argument types: ' + functionTest.messages);\n\n        functionTest = requires['default'](testFunction, ['function', 'boolean', 'string']);\n\n        assert.ok(!functionTest.requires, 'Functioned as expected when passed undesired argument types: ' + functionTest.messages);\n    });\n\n});","define('dummy/tests/unit/helpers/sl/synchronous/requires-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/sl/synchronous');\n  QUnit.test('unit/helpers/sl/synchronous/requires-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sl/synchronous/requires-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/helpers/sl/utils/utils-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/utils/utils', 'dummy/tests/helpers/sl/synchronous/requires'], function (Ember, ember_qunit, utils, requires) {\n\n    'use strict';\n\n    module('Unit | Utils | sl/utils/utils');\n\n    ember_qunit.test('convertToArray() exists', function (assert) {\n        assert.ok(utils.convertToArray, 'it exists');\n    });\n\n    ember_qunit.test('convertStringToArray() exists', function (assert) {\n        assert.ok(utils.convertStringToArray, 'it exists');\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() exists', function (assert) {\n        assert.ok(utils.convertObjectKeysToArray, 'it exists');\n    });\n\n    ember_qunit.test('doArraysIntersect() exists', function (assert) {\n        assert.ok(utils.doArraysIntersect, 'it exists');\n    });\n\n    ember_qunit.test('convertToArray() requires either an Array, String, or Object to be provided', function (assert) {\n        var properties = Ember['default'].Object.create({\n            parameters: undefined\n        });\n\n        var callConvertToArray = function callConvertToArray() {\n            return utils.convertToArray(properties.parameters);\n        };\n\n        // null\n        properties.set('parameters', null);\n\n        assert.throws(callConvertToArray, 'property was null');\n\n        // undefined\n        properties.set('parameters', undefined);\n\n        assert.throws(callConvertToArray, 'property was undefined');\n\n        // Boolean\n        properties.set('parameters', false);\n\n        assert.throws(callConvertToArray, 'property was a Boolean');\n\n        // Number\n        properties.set('parameters', 132);\n\n        assert.throws(callConvertToArray, 'property was a Number');\n\n        // Function\n        properties.set('parameters', function () {});\n\n        assert.throws(callConvertToArray, 'property was a Function');\n\n        // Array\n        properties.set('parameters', []);\n\n        assert.ok(callConvertToArray(), 'property was an Array');\n\n        // String\n        properties.set('parameters', 'test string');\n\n        assert.ok(callConvertToArray(), 'property was a String');\n\n        // Object\n        properties.set('parameters', {});\n\n        assert.ok(callConvertToArray(), 'property was an Object');\n    });\n\n    ember_qunit.test('convertToArray() returns expected result', function (assert) {\n        var testResults1 = utils.convertToArray(['a', 'b']);\n        var testResults2 = utils.convertToArray('testing things');\n        var testResults3 = utils.convertToArray({ a: 1, b: 2 });\n\n        assert.ok('array' === Ember['default'].typeOf(testResults1));\n        assert.deepEqual(['a', 'b'], testResults1);\n\n        assert.ok('array' === Ember['default'].typeOf(testResults2));\n        assert.deepEqual(['testing', 'things'], testResults2);\n\n        assert.ok('array' === Ember['default'].typeOf(testResults3));\n        assert.deepEqual(['a', 'b'], testResults3);\n    });\n\n    ember_qunit.test('convertStringToArray() requires a string to be provided', function (assert) {\n        var properties = Ember['default'].Object.create({\n            parameters: undefined\n        });\n\n        var callConvertStringToArray = function callConvertStringToArray() {\n            return utils.convertStringToArray(properties.parameters);\n        };\n\n        // null\n        properties.set('parameters', null);\n\n        assert.throws(callConvertStringToArray, 'property was null');\n\n        // undefined\n        properties.set('parameters', undefined);\n\n        assert.throws(callConvertStringToArray, 'property was undefined');\n\n        // Boolean\n        properties.set('parameters', false);\n\n        assert.throws(callConvertStringToArray, 'property was a Boolean');\n\n        // Number\n        properties.set('parameters', 132);\n\n        assert.throws(callConvertStringToArray, 'property was a Number');\n\n        // Function\n        properties.set('parameters', function () {});\n\n        assert.throws(callConvertStringToArray, 'property was a Function');\n\n        // Array\n        properties.set('parameters', []);\n\n        assert.throws(callConvertStringToArray, 'property was an Array');\n\n        // Object\n        properties.set('parameters', {});\n\n        assert.throws(callConvertStringToArray, 'property was an Object');\n\n        // String\n        properties.set('parameters', 'test string');\n\n        assert.ok(callConvertStringToArray(), 'property was a String');\n    });\n\n    var testName1 = 'convertStringToArray() returns an array with a single' + 'element when passed a string without spaces';\n\n    ember_qunit.test(testName1, function (assert) {\n        assert.deepEqual(utils.convertStringToArray('testString'), ['testString']);\n    });\n\n    var testName2 = 'convertStringToArray() returns an array with as many elements as there' + 'are \"words\" represented in a string passed to it containing spaces';\n\n    ember_qunit.test(testName2, function (assert) {\n        assert.deepEqual(utils.convertStringToArray('the test string'), ['the', 'test', 'string']);\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() requires an object to be provided', function (assert) {\n        var requiredObjectTest = requires['default'](utils.convertObjectKeysToArray, ['object']);\n\n        assert.ok(requiredObjectTest.requires, requiredObjectTest.messages);\n    });\n\n    ember_qunit.test('convertObjectKeysToArray() returns an array of object properties', function (assert) {\n        assert.deepEqual(utils.convertObjectKeysToArray({\n            testing: true,\n            bird: 'duck'\n        }), ['testing', 'bird']);\n        assert.deepEqual(utils.convertObjectKeysToArray({\n            testing2: true,\n            bird2: {\n                feathers: true,\n                tasty: false\n            }\n        }), ['testing2', 'bird2']);\n    });\n\n    ember_qunit.test('doArraysIntersect() requires both parameters to be Arrays', function (assert) {\n        var testPropertyOne = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var testPropertyTwo = Ember['default'].Object.create({\n            parameter: undefined\n        });\n\n        var callDoArraysIntersect = function callDoArraysIntersect() {\n            return utils.doArraysIntersect(testPropertyOne.parameter, testPropertyTwo.parameter);\n        };\n\n        // Second Parameter is not an array\n        testPropertyOne.set('parameter', []);\n        testPropertyTwo.set('parameter', '');\n\n        assert.throws(callDoArraysIntersect, 'Second parameter was a string');\n\n        // First Parameter is not an array\n        testPropertyOne.set('parameter', '');\n        testPropertyTwo.set('parameter', []);\n\n        assert.throws(callDoArraysIntersect, 'First parameter was a string');\n\n        // Both Parameters are arrays\n        testPropertyOne.set('parameter', ['a']);\n        testPropertyTwo.set('parameter', ['a']);\n\n        assert.ok(callDoArraysIntersect(), 'Parameters were both array');\n    });\n\n    ember_qunit.test('doArraysIntersect() functions as expected', function (assert) {\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a']), 'Single intersection into multiple');\n\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a', 'c']), 'Multiple intersections into multiple');\n\n        assert.ok(utils.doArraysIntersect(['a', 'b', 'c'], ['a', 'c', 'd']), 'Multiple intersections into multiple with single non-intersection value');\n\n        assert.ok(!utils.doArraysIntersect(['a', 'b', 'c'], ['d']), 'Single non-intersection value into multiple');\n\n        assert.ok(!utils.doArraysIntersect(['d'], ['a']), 'Single non-intersection value into single, with non-intersection value');\n\n        assert.ok(utils.doArraysIntersect(['d'], ['a', 'd', 'e']), 'Multiple intersections into single, with single intersection value');\n    });\n\n});","define('dummy/tests/unit/helpers/sl/utils/utils-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/sl/utils');\n  QUnit.test('unit/helpers/sl/utils/utils-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sl/utils/utils-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"sl-ember-test-helpers\",\"version\":\"1.10.0+51f52d70\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrtNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}